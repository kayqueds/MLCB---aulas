# ===== Aprendizado por Reforço =====
# Objetivo: Ensinar um agente a chegar até o objetivo final.
# Paradigma: O agente aprende por tentativa e erro, recebendo recompensas.

import numpy as np

# 1. Configuração do ambiente
n_states = 5        # Quantidade de posições (0 a 4)
n_actions = 2       # 0 = ir para trás, 1 = ir para frente
q_table = np.zeros((n_states, n_actions))  # Tabela Q inicial

# 2. Hiperparâmetros do aprendizado
alpha = 0.8   # taxa de aprendizado
gamma = 0.95  # fator de desconto
epsilon = 0.1 # probabilidade de explorar
n_episodes = 100

# 3. Treinamento
for ep in range(n_episodes):
    state = 0
    done = False
    while not done:
        # Escolher ação (exploração ou exploração)
        if np.random.uniform(0, 1) < epsilon:
            action = np.random.choice(n_actions)  # Explorar
        else:
            action = np.argmax(q_table[state])    # Exploitar

        # Movimento no ambiente
        if action == 1:  # Ir para frente
            new_state = min(state + 1, n_states - 1)
        else:  # Ir para trás
            new_state = max(state - 1, 0)

        # Recompensa e finalização
        reward = 1 if new_state == n_states - 1 else 0
        done = new_state == n_states - 1

        # Atualiza Q-table
        q_table[state, action] = (1 - alpha) * q_table[state, action] + \
                                 alpha * (reward + gamma * np.max(q_table[new_state]))
        state = new_state

print("\nQ-table final:")
print(q_table)

# 4. Interação: simular execução treinada
while True:
    entrada = input("\nDigite um estado inicial entre 0 e 4 (ou 'sair' para encerrar): ")
    if entrada.lower() == "sair":
        break
    try:
        pos = int(entrada)
        while pos != n_states - 1:
            acao = np.argmax(q_table[pos])
            if acao == 1:
                pos = min(pos + 1, n_states - 1)
                print("→ Avançou para", pos)
            else:
                pos = max(pos - 1, 0)
                print("← Voltou para", pos)
        print("Objetivo alcançado!")
    except:
        print("Digite um número válido!")

