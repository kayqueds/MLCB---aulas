#TAREFAS DE APRENDIZADO SUPERVISIONADO - Coloque todas as evidências no seu GITHUB e valide as execuções com o professor - Coloque o nome completo apenas dos integrantes presentes#

# ------------------------------------------------------------------------------
#### TAREFA 1 :  Treine o modelo abaixo colocando mais 4 conjuntos de dados e rode sem erros no VSCODE - Faça teste após o treinamento ###

import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Função de pré-processamento
def limpar_texto(texto):
    texto = texto.lower()  # Converte para minúsculas
    texto = re.sub(r'[^\w\s]', '', texto)  # Remove pontuação
    texto = re.sub(r'\d+', '', texto)  # Remove números
    texto = texto.strip()  # Remove espaços extras
    return texto

# 1. Conjunto de dados (mensagens + rótulos)
mensagens = [
    "Quero fazer um pedido",
    "Preciso falar com o suporte",
    "Quais promoções vocês têm hoje?",
    "Qual o horário de funcionamento?",
    "Meu produto veio com defeito",
    "Posso pagar com cartão de crédito?"
]
rotulos = ["pedido", "suporte", "promoção", "informação", "suporte", "pagamento"]

# 2. Pré-processamento das mensagens
mensagens_limpas = [limpar_texto(m) for m in mensagens]

# 3. Vetorização
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(mensagens_limpas)

# 4. Treinamento do modelo
modelo = MultinomialNB()
modelo.fit(X, rotulos)

# 5. Interação com o usuário
while True:
    nova_mensagem = input("\nDigite uma mensagem (ou 'sair' para encerrar): ")
    if nova_mensagem.lower() == "sair":
        break
    nova_mensagem_limpa = limpar_texto(nova_mensagem)
    X_novo = vectorizer.transform([nova_mensagem_limpa])
    predicao = modelo.predict(X_novo)
    print(f"Intenção prevista: {predicao[0]}")



#### TAREFA 2 :  Criar um classificador de mensagens para um bot de atendimento acadêmico - rode sem erros no VSCODE ###

# Criar um classificador de mensagens para um bot de atendimento acadêmico.
# Instruções:
# 1. Crie uma lista de frases (ex: dúvidas sobre matrícula, notas, eventos, biblioteca)
# 2. Crie a lista de rótulos correspondentes
# 3. Vetorize as frases com CountVectorizer
# 4. Treine um modelo Naive Bayes ou outro de sua escolha
# 5. Teste com uma nova frase e imprima o resultado

# início código
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# 1. Dataset
frases = [
    # exemplo: "Quando abre matrícula?", ...
]
rotulos = [
    # exemplo: "matricula", ...
]

# 2. Vetorização
# ...

# 3. Modelo
# ...

# 4. Previsão
# ...


#### TAREFA 3 :  Criar um classificador de Previsão de Tempo de Entrega de Pizza - rode sem erros no VSCODE ###
# ------------------------------------------------------------------------------
#criar um modelo que prevê o tempo de entrega (em minutos) com base na distância (em km) e no número de pizzas no pedido.
# ------------------------------------------------------------------------------
from sklearn.linear_model import LinearRegression

print("\n--- 1.2 Exercício para Alunos (Supervisionado) ---")

# Dados de Treino: [distancia_km, numero_de_pizzas]
dados_entregas = np.array([
    [5, 2],   # 5 km, 2 pizzas
    [2, 1],   # 2 km, 1 pizza
    [10, 4],  # 10 km, 4 pizzas
    [7, 3],   # 7 km, 3 pizzas
    [1, 1]    # 1 km, 1 pizza
])

# Rótulos: Tempo de entrega em minutos
tempos_entrega = np.array([30, 15, 55, 40, 10])

# TODO: Crie uma instância do modelo LinearRegression.
# modelo_entrega = ???

# TODO: Treine o modelo usando os dados de entregas e os tempos.
# ???.fit(???, ???)

# TODO: Faça a previsão para um novo pedido: 8 km de distância e 2 pizzas.
# pedido_novo = np.array([[8, 2]])
# tempo_previsto = ???.predict(???)

# print(f"Tempo de entrega previsto para o novo pedido: {tempo_previsto[0]:.2f} minutos")
print("Complete o código acima para prever o tempo de entrega!")


# --- SOLUÇÃO COMENTADA DO EXERCÍCIO ---
# modelo_entrega = LinearRegression()
# modelo_entrega.fit(dados_entregas, tempos_entrega)
# pedido_novo = np.array([[8, 2]])
# tempo_previsto = modelo_entrega.predict(pedido_novo)
# print(f"SOLUÇÃO: Tempo de entrega previsto para o novo pedido: {tempo_previsto[0]:.2f} minutos")
# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------
#TAREFAS DE APRENDIZADO NÃO SUPERVISIONADO - Coloque todas as evidências no seu GITHUB e valide as execuções com o professor#
# ------------------------------------------------------------------------------

# TAREFA 4 :Treine o modelo abaixo colocando mais 3 conjuntos de dados e parametrize para 3 clusters e rode sem erros no VSCODE - Faça teste após o treinamento 
# aprendizado não supervisionado para agrupar mensagens semelhantes sem informar ao modelo quais são suas categorias.
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.cluster import KMeans

# 1. Matriz de mensagens (sem rótulos)
mensagens = [
    "Quero pedir pizza",
    "Qual o valor da pizza grande?",
    "Preciso de suporte no aplicativo",
    "O app está travando",
    "Vocês têm sobremesas?",
    "Meu pedido está atrasado"
]

# 2. Vetorizar texto
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(mensagens)

# 3. Criar modelo de agrupamento
kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)
kmeans.fit(X)

# 4. Mostrar os grupos encontrados
print("\nAgrupamento de mensagens:")
for i, msg in enumerate(mensagens):
    print(f"'{msg}' => Cluster {kmeans.labels_[i]}")

# 5. Interação: classificar nova frase
while True:
    nova_mensagem = input("\nDigite uma nova mensagem (ou 'sair' para encerrar): ")
    if nova_mensagem.lower() == "sair":
        break
    X_novo = vectorizer.transform([nova_mensagem])
    cluster_previsto = kmeans.predict(X_novo)
    print(f"Essa mensagem se parece com o Cluster {cluster_previsto[0]}")

# TAREFA 5 : Agrupar frases de um chatbot de turismo - rode sem erros no VSCODE
# 1. Crie uma lista de frases sobre passagens, hospedagem, passeios, restaurantes
# 2. Vetorize as frases
# 3. Use KMeans com número de clusters à sua escolha
# 4. Imprima a qual cluster cada frase pertence

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.cluster import KMeans

# 1. Dataset
frases = [
    # exemplo: "Quero reservar hotel", ...
]

# 2. Vetorização
# ...

# 3. Modelo
# ...

# 4. Saída
# ...

# TAREFA 6 : # Encontrar Produtos "Âncora" - rode sem erros no VSCODE
# Sua Missão: identificar os 2 produtos que melhor representam suas categorias principais, para colocá-los em destaque na home page. Estes são os produtos "âncora".
# Dica: Os produtos âncora são os centros dos clusters!
# ------------------------------------------------------------------------------
print("\n--- Exercício Não Supervisionado ---")

# Dados: [preco_produto, nota_de_popularidade (0-10)]
dados_produtos = np.array([
    [10, 2], [15, 3], [12, 1],   # Categoria 1: Baratos e menos populares
    [200, 9], [180, 8], [210, 10] # Categoria 2: Caros e muito populares
])

# TODO: Crie um modelo KMeans para encontrar 2 clusters.
# modelo_produtos = ???

# TODO: Treine o modelo com os dados dos produtos.
# ???.fit(???)

# Os centros dos clusters são os nossos produtos "âncora" ideais.
# produtos_ancora = ???.cluster_centers_

# print(f"Características dos Produtos Âncora (Preço, Popularidade):\n{produtos_ancora}")
print("Complete o código para encontrar os produtos âncora!")

# --- SOLUÇÃO COMENTADA DO EXERCÍCIO 2.2 ---
# modelo_produtos = KMeans(n_clusters=2, random_state=42, n_init=10)
# modelo_produtos.fit(dados_produtos)
# produtos_ancora = modelo_produtos.cluster_centers_
# print(f"SOLUÇÃO: Características dos Produtos Âncora (Preço, Popularidade):\n{produtos_ancora}")
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
#### NÃO ESQUEÇA:  TODAS AS EVIDÊNCIA PRECISAM ESTAR NO GITHUB DE VOCÊS - Coloque o nome completo apenas dos integrantes presentes ###
